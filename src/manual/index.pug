extends /_include/_template/_t_base_template

block vars
	-
		var pageOption = {
			KEY: "",
			URL: '',
			RELATIVE_PATH: '../',
			TITLE: 'カラダがwebでできている',
			DESCRIPTION: '',
			KEYWORDS: '',
			side: [false,"left"],
			HEADER: true,
			FOOTER: true,
			SIDE: false,
		}
block header
	+c-templateHeader01
block footer
	+c-templateFooter01
block contents
	+l-contentsWidth({tag:"div"})
		+l-mqWrapper({tag:"div"})
			+l-columnBlock({tag:"div"})
				+l-columnBox({tag:"div"})
					+m-borderRightTitle01({tag:"h3", title:"ダウンロード"})
					+m-discList01
						+m-list01({url:"https://github.com/shiroiyoMegane/coding-template/raw/master/docs/assets/file/_b_baseSrc.zip", text:"初期セット"})
					+m-defaultTag({tag:"div"})
						p 今バグってるので、gitから落としてくる
			+l-columnBlock({tag:"div"})
				+l-columnBox({tag:"div"})
					+m-borderRightTitle01({tag:"h3", title:"インストール"})
					+m-defaultTag({tag:"div"})
						p
							b ■必須環境
						pre
							code.stylus.
								node 10.0.0（11使うとbrowsersyncが止まる）
								gulp 4
								webpack 4
								詳しくは、package.json
						p
							b ■初期設定 インストール
						pre
							code.stylus.
								npm install
						p
							b ■構築
						pre
							code.stylus.
								gulp build
						p
							b ■gulp 起動
						pre
							code.stylus.
								gulp
						pre
							code.stylus.
								gulp build でdocsのデータを一度してから削除するので注意
							
			+l-columnBlock({tag:"div"})
				+l-columnBox({tag:"div"})
					+m-borderRightTitle01({tag:"h3", title:"git"})
					+m-defaultTag({tag:"div"})
						p
							b ■除外ファイルはプッシュしない(gitignoreで設定)
						pre
							code.stylus.
								node_module/ ←ファイル数いっぱいあるのでプッシュしたら大変なことになる！
								docs/ ←案件によっては、コメントアウトしよう

			+l-columnBlock({tag:"div"})
				+l-columnBox({tag:"div"})
					+m-borderRightTitle01({tag:"h3", title:"ファイル構成"})
					+m-defaultTag({tag:"div"})
						p モジュール、コンポーネントなどは、pug、stylus、jsに限らず、_include 以下に入れる。
							br
							| 制作物に合わせて適宜変更する
						pre
							code.stylus.
								● _include
								|-- □ components     // コンポーネント・共通パーツ（ヘッダー、フッター）などのパーツ
								|-- □ layout         // レイアウト（wrapperやcontents幅など）外側のパーツ
								|-- □ modules        // モジュール(ボタン、タイトルなど)内側のパーツ
								|-- □ pages          // ページ固有のコンポーネント群
									|-- ○ _p_home    // トップページ用 コンポーネント群
								|-- □ settings       // head、meta、グローバル変数、mixinなど 初期設定群
									|-- ○ _pug       // pug用設定ファイル
									|-- ○ _stylus    // stylus用設定ファイル
								|-- □ template       // テンプレートファイル


			+l-columnBlock({tag:"div"})
				+l-columnBox({tag:"div"})
					+m-borderRightTitle01({tag:"h3", title:"class命名規則"})
					+m-defaultTag({tag:"div"})
						p
							b ■ コンポーネント、モジュールの名前の付け方
						pre
							code.stylus.
								接頭辞-名前-番号
								例: c-newsSet01
						pre
							code.stylus.
								bem記法を混ぜないこと！！（アンダーバーを混ぜないで）
								例: .c-newsSet01__element
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ 接頭辞 / プリフィックス
						+m-table01({tag:"div"})
							tbody
								tr
									td l-
									td layout / レイアウト
								tr
									td c-
									td component / コンポーネント
								tr
									td m-
									td module / モジュール
								tr
									td p-
									td page / ページ
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ コンポーネントの構造について
						p コンポーネントの基本構造については、大きい順から.group>.block>.areaに分けて考える。
							br
							| ブロックをテキストや画像などの、特定の要素に振り分けたい場合は、is-text、is-imageなどのステートを付与することで管理する。
						pre
							code.stylus.
								//構造の例
								.group.is-primary
									.block.is-contents
										.area.is-title
											.box
												.item
													p
													ul
										.area.is-image
											p
												img(src="", alt="")
						+m-table01({tag:"div"})
							tbody
								tr
									td .group
									td コンポーネントの中で一番目に大きい要素
								tr
									td .block
									td コンポーネントの中で二番目に大きい要素
								tr
									td .area
									td コンポーネントの中で三番目に大きい要素
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ ステート
						pre
							code.stylus.
								.is-名前

								.is-red, is-left, is-animate
								.is-left, .is-right
								.is-pc, .is-sp
								.is-imageLeft, .is-imageRight
								.is-active, .is-current
								.is-white, .is-red
						+m-table01({tag:"div"})
							tbody
								tr
									td .is-
									td .is-text is-active など、属している情報や状態などに
								tr
									td .has-
									td .has-title .has-image など、子要素に何か含んでいる場合など
								tr
									td .js-
									td .js-mainvisualSet .js-matchHeight など、javascriptでターゲットにする要素に
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ class名サンプル
						+m-table01({tag:"div"})
							tbody
								tr
									td .btn
									td ボタン要素。buttonにするとhtmlの要素とかぶるので省略形で
								tr
									td .bg
									td 背景要素
								tr
									td .icon
									td アイコン要素
								tr
									td .image
									td 画像要素
								tr
									td .list
									td リスト要素
								tr
									td .title
									td タイトル要素
								tr
									td .subTitle
									td サブタイトル要素
								tr
									td .text
									td テキスト要素


			+l-columnBlock({tag:"div"})
				+l-columnBox({tag:"div"})
					+m-borderRightTitle01({tag:"h3", title:"images"})
					+m-defaultTag({tag:"div"})
						p
							b ■ディレクトリについて
						p 共通画像はcommonへ
							br
							| ページごとの画像はcontents以下へ
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ 画像命名規則
						pre
							code.stylus.
								ページ_名前_パーツ番号 = home_mainvisual_image01.png

								common_header_arrow01.png
								home_mainvisual_image01.png

			+l-columnBlock({tag:"div"})
				+l-columnBox({tag:"div"})
					+m-borderRightTitle01({tag:"h3", title:"pug"})
					+m-defaultTag({tag:"div"})
						p
							b ■ 基本
						+m-discList01
							li 「=」の後ろにはスペースを入れる
							li 各ページの頭にある変数で、ヘッダー、フッター、サイドメニューの表示非表示できる
							li 階層は「RELATIVE_PATH」を利用すると階層が変わったときにもすぐに対応できる
								pre
									code.stylus.
										a(href= pageOption.RELATIVE_PATH + "index.html")
										img(src= pageOption.RELATIVE_PATH + "images/contents/home/image01.png" alt="")
							li インデントはタブで（distに書き出したらスペースになるので、みやすさ重視）
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ 新規ページ追加
						+m-discList01
							li ページの「pageOption.KEY」変数を変更するとbodyのclassを変更することができる


			+l-columnBlock({tag:"div"})
				+l-columnBox({tag:"div"})
					+m-borderRightTitle01({tag:"h3", title:"stylus"})
					+m-defaultTag({tag:"div"})
						p
							b ■ 基本
						+m-discList01
							li 広い範囲で、titleやtextなどのclassにスタイルを当てない（他のページに影響するので）
							li スタイルを当てるときは、親子関係を意識する
							li importantは極力使わない
							li プロパティ、疑似要素、ブレイクポイントの前などは改行を入れるなどして、あとで見たときわかりやすくしておく
							li 「：」と「；」は省略
							li インデントはタブで（distに書き出したらスペースになるので、みやすさ重視）
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ コンポーネント化、モジュール化
						+m-discList01
							li モジュールにあまり細かい指定をしない
								br
								| （フォントサイズやマージンなどはコンポーネントで指定する）
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ レスポンシブ、ブレイクポイント
						+m-discList01
							li ブレイクポイントの記述は離しすぎない（どこに行ったかわからなくなるので）
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ cssサンプル
							| 影響範囲の広さ、外側から内側へむかって書く:（コロン）;（セミコロン）は省略する
						pre
							code.stylus.
								content ""
								cursor pointer
								overflow hidden

								・ディスプレイ
								display flex
								order 1
								flex-wrap wrap
								justify-contents space-between
								align-items center

								list-style-type decimal
								table-layout fixed
								border-collapse collapse

								・float
								clear both
								float left

								・ポジション
								position absolute
								top 0
								right 0
								bottom 0
								left 0
								z-index 10

								・サイズ
								max-width 100px
								min-width 100px
								width 100px
								max-height 100px
								min-height 100px
								height 100px

								・間隔
								margin 10px 20px
								padding 10px 20px

								・色
								color #fff
								background-color #fff
								background-image url("")
								background-repeat no-repeat
								background-position left top
								background-size cover
								border 1px solid #fff
								border-radius 10px

								・文字
								font-family ""
								font-size 10px
								text-align center
								line-height 1.0
								vertical-align middle
								text-decoration: underline;

								・トランスフォーム
								transform-origine center
								transform translate3d(-50%, -50%, 0) rotate(180deg)

								・アニメーション
								animation-name fadeIn
								animation-duration 3s
								animation-timing-function linear
								transition all 0.3s ease



			+l-columnBlock({tag:"div"})
				+l-columnBox({tag:"div"})
					+m-borderRightTitle01({tag:"h3", title:"コーディング仕様"})
					+m-defaultTag({tag:"div"})
						p
							b ■ 文字コード
							p 原則、UTF-8 とする
								br
								| ※システム要件/言語/サーバの仕様で Shift-JIS や EUC-JP などが必要な場合は適宜変更する。
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ DOCTYPE
						p 原則、HTML5 とする。仕様に応じて適宜変更する。
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ マークアップ
						p 文法に則った HTML を記述する。 
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ 書式ルール
						p インデントは、半角スペース 2つもしくは、タブを使用する。
							br
							| 混在しないように気をつける。
				+l-columnBox({tag:"div"})
					+m-defaultTag({tag:"div"})
						p
							b ■ 改行
						p 適切なブロックごとに改行する。
							br
							| pugで出力されたもので制御できない場合もある。













